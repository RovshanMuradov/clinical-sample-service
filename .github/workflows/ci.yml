name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_clinical_samples_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql+asyncpg://test_user:test_password@localhost:5432/test_clinical_samples_db" >> .env
        echo "SECRET_KEY=test-secret-key-for-ci-only-not-for-production" >> .env
        echo "ALGORITHM=HS256" >> .env
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> .env
        echo "DEBUG=False" >> .env
        echo "LOG_LEVEL=INFO" >> .env

    - name: Run database migrations
      run: |
        alembic upgrade head

    - name: Run linting
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

    - name: Run type checking
      run: |
        mypy app/ --ignore-missing-imports

    - name: Run tests with coverage
      run: |
        pytest --cov=app --cov-branch --cov-report=xml --cov-report=term --junitxml=junit.xml -v

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Upload test results to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  lint-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt

    - name: Check code formatting with Black
      run: |
        black --check --diff app/ tests/

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff app/ tests/

  security:
    runs-on: ubuntu-latest
    continue-on-error: true  # Make this job optional for now
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install safety
      run: |
        python -m pip install --upgrade pip
        pip install safety

    - name: Check for security vulnerabilities
      run: |
        pip install -r requirements/prod.txt
        safety check --json || echo "Security scan completed with warnings"